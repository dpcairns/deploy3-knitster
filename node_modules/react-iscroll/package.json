{
  "name": "react-iscroll",
  "version": "1.0.0",
  "homepage": "https://github.com/schovi/react-iscroll",
  "keywords": [
    "react",
    "iscroll",
    "scroll"
  ],
  "bugs": {
    "url": "https://github.com/schovi/react-iscroll/issues"
  },
  "license": "MIT",
  "author": {
    "name": "David Schovanec"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:schovi/react-iscroll.git"
  },
  "main": "dist/react-iscroll.js",
  "jsnext:main": "src/react-iscroll.jsx",
  "dependencies": {
    "deep-equal": "^1.0.0"
  },
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-loader": "^6.2.0",
    "babel-plugin-transform-class-properties": "^6.2.2",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "css-loader": "^0.23.0",
    "iscroll": "^5.1.3",
    "react": "^0.14.3",
    "react-dom": "^0.14.3",
    "react-hot-api": "^0.5.0",
    "react-hot-loader": "^1.3.0",
    "style-loader": "^0.13.0",
    "webpack": "^1.12.9",
    "webpack-dev-server": "^1.10.1"
  },
  "peerDependencies": {
    "react": ">=0.13.0 <=0.14.x",
    "react-dom": "0.14.x"
  },
  "scripts": {
    "compile": "babel -d dist/ src/",
    "prepublish": "npm run compile",
    "example": "webpack-dev-server --content-base example/ --config example/webpack.config.js --progress --hot --inline"
  },
  "readme": "# React iScroll\n\nReact component for wrapping iScroll library.\n\n## ! Breaking changes in version 1.0.0\n\n- Property for passing iScroll instance is renamed from `iscroll` to `iScroll` and naming is unified across whole package\n  - use it like `<ReactIScroll iScroll={iScroll}>` instead of ~~`<ReactIScroll iscroll={iScroll}>`~~\n- Inner content wrapper is removed. https://github.com/schovi/react-iscroll/commit/ecd75bb75667a45d2e14a2eda0a1b7d56c9d54f4\n  - You can do it by yourself by wrapping childrens of ReactIScroll component into one more div with specific styling (check **Horizontal scroll example** there in README)\n  - Main iScroll element has same behaviour and you can still change styling with `style` and `className` properties.\n\n### What is iScroll?\n\n> iScroll is a high performance, small footprint, dependency free, multi-platform javascript scroller.\n>\n> -- <cite>[iScroll's homepage][1]</cite>\n\n[1]:http://iscrolljs.com/\n\nWorks on mobile and desktop, supports zooming, pagging, parallax scrolling, carousels and is incredibly small (4kb compress gzipped).\n\n### Why React compoment?\n\nReact components are great way how to compose your application. And they are great how to handle third party libraries. You can wrap complex logic around library and expose simple API, which are react users used to.\n\n## Install\n\n    npm install react-iscroll\n\n## Usage\n\nSimple example app. Allow scrolling on long list and catch event when scrolling starts.\n\n```js\nvar React = require('react'),\n    ReactIScroll = require('react-iscroll'),\n    iScroll = require('iscroll');\n\nvar ExampleApp = React.createClass({\n  getDefaultProps: function() {\n    return ({\n      options: {\n        mouseWheel: true,\n        scrollbars: true\n      }\n    })\n  },\n  onScrollStart: function() {\n    console.log(\"iScroll starts scrolling\")\n  },\n  render: function() {\n    var i = 0, len = 1000, listOfLi = [];\n\n    for(i; i < len; i++) {\n      listOfLi.push(<li key={i}>Row {i+1}</li>)\n    }\n\n    return (\n      <div style={height: '100vh'}>\n        <h1>Example of scrollable list</h1>\n        <ReactIScroll iScroll={iScroll}\n                      options={this.props.options}\n                      onScrollStart={this.onScrollStart}>\n          <ul>\n            {listOfLi}\n          </ul>\n        </ReactIScroll>\n      </div>\n    )\n  }\n})\n```\n\n## Configuration (API)\n\nBasic configuration. Just component with iScroll library. You can pick build which you want.\n\n```js\nvar iScroll = require('iscroll/build/iscroll-lite')\n\n<ReactIScroll iScroll={iScroll}>\n  <div>Long content...</div>\n</ReactIScroll>\n```\n\nYou can customize iScroll options with `options` property. Supports all from [iScroll manual](http://iscrolljs.com/)\n\n```js\nvar iScroll = require('iscroll/build/iscroll-probe')\nvar options = {\n  mouseWheel: true,\n  scrollbars: true,\n  freeScroll: true,\n  invertWheelDirection: true,\n  momentum: false,\n  indicators: {...}\n}\n\n<ReactIScroll iScroll={iScroll}\n              options={options}>\n  <div>Long content...</div>\n</ReactIScroll>\n```\n\nComponent supports all iScroll events. All of them passed iScroll instance to callback.\n\n```js\nvar iScroll = require('iscroll/build/iscroll-probe')\n\n<ReactIScroll iScroll={iScroll}\n              onBeforeScrollStart={this.onBeforeScrollStart}\n              onScrollCancel={this.onScrollCancel}\n              onScrollStart={this.onScrollStart}\n              onScroll={this.onScroll}\n              onScrollEnd={this.onScrollEnd}\n              onFlick={this.onFlick}\n              onZoomStart={this.onZoomStart}\n              onZoomEnd={this.onZoomEnd}>\n  <div>Long content...</div>\n</ReactIScroll>\n```\n\nPlus there is one special event 'onRefresh' which is triggered when iScroll is refreshed. You can then get state of iScroll like `iscroll.hasVerticalScroll`, `iscroll.x` or `iscroll.scale`.\n\n**Watch out when updating state by value from iScroll. Always update state only when value changed to prevent circular updating (stack level too deep)**\n\n```js\nvar iScroll = require('iscroll/build/iscroll-lite')\n\nonRefresh: function(iScrollInstance) {\n  var yScroll = iScrollInstance.y;\n\n  console.log(\"vertical position:\" + yScroll)\n\n  if(this.state.y != yScroll) {\n    this.setState({y: yScroll})\n  }\n},\nrender: function() {\n  return (\n    <ReactIScroll iScroll={iScroll}\n                  onRefresh={this.onRefresh}>\n      <div>Long content...</div>\n    </ReactIScroll>\n  )\n}\n```\n\n### function component.getIScroll()\n\nReturn iScroll instance if initialized\n\n### function component.withIScroll([waitForInit], callback)\n\nRun callback with iScroll instance as argument if instance is initialized.\nYou can pass `true` as first argument for call callback after iScroll is initialized\n\n```js\n  onSomethingClick: function(ev) {\n    ev.preventDefault()\n    this.refs.iScroll.withIScroll(function(iScroll) {\n      iScroll.destroy()\n    })\n  },\n\n  render: function() {\n    return(\n      <div>\n        <a class=\"#\" onClick={this.onSomethingClick}>Do something</a>\n        <ReactIScroll ref=\"iScroll\"\n                      iScroll={iScroll}\n                      onRefresh={this.onRefresh}>\n          <div>Long content...</div>\n        </ReactIScroll>\n      </div>\n    )\n  }\n```\n\n## Horizonzal scroll\n\nCommon usecase of horizontal scrolling\n\n```js\nvar React = require('react'),\n    ReactIScroll = require('react-iscroll'),\n    iScroll = require('iscroll');\n\nvar HorizontalScroll = React.createClass({\n  render: function() {\n    return (\n      <ReactIScroll iScroll={iScroll}\n                    options={{mouseWheel: true, scrollbars: true, scrollX: true}}>\n        <div style={{width:'200%'}}>\n          <ul>\n            {listOfLi}\n          </ul>\n        </div>\n      </ReactIScroll>\n    )\n  }\n})\n```\n\n## Example\n\nThere is example application. You can run it with this commands:\n\n- `npm install`\n- `npm run example`\n- `open http://localhost:8080/`\n\n## To-Do\n\n- [ ] Add tests\n- [ ] Think about `shouldComponentUpdate`. Now it is always true because `this.props.children` are new object everytime and can't be compared via `==` or `===`. Maybe there is some way how to cheaply compare them.\n- [ ] Don't initialize IScroll when there is no child supplied.\n\n### Done\n- [x] Make this README.md :)\n- [x] Trigger `onRefresh` event when iScroll is internally refreshed (e.g. on window resize)\n- [x] Do not `require('iscroll')` by itself. Instead pass it in props (there is few different versions of iScroll and you want to pick correct one for you)\n- [x] Publish to npm\n- [x] Convert source code into Babel\n\n\n## Licence\n\nReact iScroll is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "description": "React component for wrapping iScroll library.",
  "_id": "react-iscroll@1.0.0",
  "dist": {
    "shasum": "235d09602544880dcf9574246b71ad825d30901b"
  },
  "_from": "react-iscroll@",
  "_resolved": "https://registry.npmjs.org/react-iscroll/-/react-iscroll-1.0.0.tgz"
}
